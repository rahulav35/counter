import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useAccountModal } from "@rainbow-me/rainbowkit";
import { useConnectModal } from "@rainbow-me/rainbowkit";
import { useAccount, useContractEvent } from "wagmi";
import { useEffect, useState } from "react";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import { ethers } from "ethers";
import dynamic from "next/dynamic";

 function Home() {
  const [count, setCount] = useState<any>("");
  const { address: user, isConnected } = useAccount();
  const { openConnectModal } = useConnectModal();
  const { openAccountModal } = useAccountModal();

  const address = "0xcf5DFD919621aEb00e7959FFf627D142A086889f";
  const abi = [
    {
      "inputs": [],
      "name": "decrement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Decremented",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "increment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Incremented",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ]
  ;

  const listenIncrement = async () => {
    const provider = new ethers.providers.JsonRpcProvider(
      "https://eth-goerli.g.alchemy.com/v2/k8P1hD80FRytUA1pAPhSansQ1VbC2nVI"
    );

    const contract = new ethers.Contract(address, abi, provider);
    contract.on("Incremented", () => {
      getCount();
    });
  };

  const listenDecrement = async () => {
    const provider = new ethers.providers.JsonRpcProvider(
      "https://eth-goerli.g.alchemy.com/v2/k8P1hD80FRytUA1pAPhSansQ1VbC2nVI"
    );
    const contract = new ethers.Contract(address, abi, provider);
    contract.on("Decremented", () => {
      getCount();
    });
  };

  useEffect(() => {
    getCount();
    listenDecrement();
    listenIncrement();
  }, [user]);

  const getCount = async () => {
    const provider = new ethers.providers.JsonRpcProvider(
      "https://eth-goerli.g.alchemy.com/v2/k8P1hD80FRytUA1pAPhSansQ1VbC2nVI"
    );
    const contract = new ethers.Contract(address, abi, provider);
    const countVal = await contract.count();
    setCount(countVal.toString());
  };

  const increment = () => {
    if (window.ethereum) {
      const provider = new ethers.providers.Web3Provider(
        window.ethereum as any
      );
      const signer = provider.getSigner();
      const contract = new ethers.Contract(address, abi, signer);
      contract.functions.increment();
    }
  };
  const decrement = () => {
    if (window.ethereum) {
      if (count !== 0) {
        const provider = new ethers.providers.Web3Provider(
          window.ethereum as any
        );
        const signer = provider.getSigner();
        const contract = new ethers.Contract(address, abi, signer);
        contract.functions.decrement();
      }
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {isConnected ? (
        <button onClick={openAccountModal} className={styles.btn}>
          connected
        </button>
      ) : (
        <button onClick={openConnectModal} className={styles.btn}>
          connect wallet
        </button>
      )}
      <div className={styles.main}>
        <button onClick={increment} className={styles.button}>
          Increment
        </button>
        <h1 className={styles.h1}>{count}</h1>
        <button onClick={decrement} className={styles.button}>
          Decrement
        </button>
      </div>
    </div>
  );
}
export default dynamic(()=>Promise.resolve(Home),{ssr:false})
